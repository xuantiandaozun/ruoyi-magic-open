package ${packageName}.controller;

import java.util.List;
import java.util.Arrays;
import jakarta.servlet.http.HttpServletResponse;
<<<<<<< HEAD
=======
import org.springframework.security.access.prepost.PreAuthorize;
>>>>>>> 2fe1861 (first commit)
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.ruoyi.framework.aspectj.lang.annotation.Log;
import com.ruoyi.framework.aspectj.lang.enums.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.ruoyi.framework.web.controller.BaseController;
import com.ruoyi.framework.web.domain.AjaxResult;
<<<<<<< HEAD
import com.ruoyi.common.utils.poi.MagicExcelUtil;
import com.mybatisflex.core.query.QueryWrapper;
import com.mybatisflex.core.paginate.Page;
import com.ruoyi.framework.web.page.PageDomain;
import com.ruoyi.framework.web.page.TableSupport;
import cn.dev33.satoken.annotation.SaCheckPermission;
=======
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.mybatisflex.core.query.QueryWrapper;
import com.mybatisflex.core.paginate.Page;
>>>>>>> 2fe1861 (first commit)
#if($table.crud || $table.sub)
import com.ruoyi.framework.web.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController
{
    @Autowired
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
<<<<<<< HEAD
    @SaCheckPermission("${permissionPrefix}:list")
=======
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
>>>>>>> 2fe1861 (first commit)
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public TableDataInfo list(${ClassName} ${className})
    {
<<<<<<< HEAD
        PageDomain pageDomain = TableSupport.buildPageRequest();
        Integer pageNum = pageDomain.getPageNum();
        Integer pageSize = pageDomain.getPageSize();
        
        // 创建 MyBatisFlex 的 QueryWrapper
        QueryWrapper queryWrapper = buildFlexQueryWrapper(${className});
        
        // 使用 MyBatisFlex 的分页方法
        Page<${ClassName}> page = ${className}Service.page(new Page<>(pageNum, pageSize), queryWrapper);
=======
        startPage();
        QueryWrapper queryWrapper = QueryWrapper.create();
        // 这里需要根据实际业务编写查询条件
        
        Page<${ClassName}> page = ${className}Service.page(getPage(), queryWrapper);
>>>>>>> 2fe1861 (first commit)
        return getDataTable(page);
    }
#elseif($table.tree)
    public AjaxResult list(${ClassName} ${className})
    {
        QueryWrapper queryWrapper = QueryWrapper.create();
        // 这里需要根据实际业务编写查询条件
        
        List<${ClassName}> list = ${className}Service.list(queryWrapper);
        return success(list);
    }
#end

    /**
     * 导出${functionName}列表
     */
<<<<<<< HEAD
    @SaCheckPermission("${permissionPrefix}:export")
=======
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
>>>>>>> 2fe1861 (first commit)
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName} ${className})
    {
        QueryWrapper queryWrapper = QueryWrapper.create();
        // 这里需要根据实际业务编写查询条件
        
        List<${ClassName}> list = ${className}Service.list(queryWrapper);
<<<<<<< HEAD
        MagicExcelUtil<${ClassName}> util = new MagicExcelUtil<>(${ClassName}.class);
=======
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
>>>>>>> 2fe1861 (first commit)
        util.exportExcel(response, list, "${functionName}数据");
    }

    /**
     * 获取${functionName}详细信息
     */
<<<<<<< HEAD
    @SaCheckPermission("${permissionPrefix}:query")
=======
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
>>>>>>> 2fe1861 (first commit)
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public AjaxResult getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField})
    {
        return success(${className}Service.getById(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
<<<<<<< HEAD
    @SaCheckPermission("${permissionPrefix}:add")
=======
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
>>>>>>> 2fe1861 (first commit)
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@RequestBody ${ClassName} ${className})
    {
#if($table.sub)
        return toAjax(${className}Service.save${ClassName}(${className}) ? 1 : 0);
#else
        return toAjax(${className}Service.save(${className}) ? 1 : 0);
#end
    }

    /**
     * 修改${functionName}
     */
<<<<<<< HEAD
    @SaCheckPermission("${permissionPrefix}:edit")
=======
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
>>>>>>> 2fe1861 (first commit)
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@RequestBody ${ClassName} ${className})
    {
#if($table.sub)
        return toAjax(${className}Service.update${ClassName}(${className}) ? 1 : 0);
#else
        return toAjax(${className}Service.updateById(${className}) ? 1 : 0);
#end
    }

    /**
     * 删除${functionName}
     */
<<<<<<< HEAD
    @SaCheckPermission("${permissionPrefix}:remove")
=======
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
>>>>>>> 2fe1861 (first commit)
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
	@DeleteMapping("/{${pkColumn.javaField}s}")
    public AjaxResult remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s)
    {
#if($table.sub)
        return toAjax(${className}Service.removeBatchBy${pkColumn.capJavaField}s(${pkColumn.javaField}s) ? ${pkColumn.javaField}s.length : 0);
#else
<<<<<<< HEAD
        return toAjax(${className}Service.removeByIds(Arrays.asList(${pkColumn.javaField}s)) ? ${pkColumn.javaField}s.length : 0);
=======
        return toAjax(${className}Service.removeBatchByIds(Arrays.asList(${pkColumn.javaField}s)) ? ${pkColumn.javaField}s.length : 0);
>>>>>>> 2fe1861 (first commit)
#end
    }
}
