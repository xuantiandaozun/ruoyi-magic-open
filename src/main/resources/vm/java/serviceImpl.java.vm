package ${packageName}.service.impl;

#if($table.sub)
import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.${subClassName};
import ${packageName}.mapper.${subClassName}Mapper;
import com.mybatisflex.core.row.DbChain;
import com.mybatisflex.core.query.QueryWrapper;
import cn.hutool.core.util.ObjectUtil;
#else
import java.util.Arrays;
#end
import org.springframework.stereotype.Service;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.mybatisflex.spring.service.impl.ServiceImpl;
#if($table.dataSource && $table.dataSource != 'MASTER')
import com.mybatisflex.annotation.UseDataSource;
#end

/**
 * ${functionName}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
#if($table.dataSource && $table.dataSource != 'MASTER')
@UseDataSource("${table.dataSource}")
#end
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service
{
#if($table.sub)
    @Autowired
    private ${subClassName}Mapper ${subclassName}Mapper;

    /**
     * 获取${functionName}详细信息（包含子表数据）
     * 
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}信息
     */
    public ${ClassName} get${ClassName}WithSubTable(${pkColumn.javaType} ${pkColumn.javaField})
    {
        ${ClassName} ${className} = getById(${pkColumn.javaField});
        if (${className} != null)
        {
            List<${subClassName}> ${subclassName}List = ${subclassName}Mapper.selectListByQuery(
                QueryWrapper.create().where("${subTableFkName} = ?", ${pkColumn.javaField})
            );
            ${className}.set${subClassName}List(${subclassName}List);
        }
        return ${className};
    }

    /**
     * 新增${subTable.functionName}信息
     * 
     * @param ${className} ${functionName}对象
     */
    private void insert${subClassName}(${ClassName} ${className})
    {
        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
        ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.getId();
        if (ObjectUtil.isNotNull(${subclassName}List))
        {
            for (${subClassName} ${subclassName} : ${subclassName}List)
            {
                ${subclassName}.set${subTableFkClassName.substring(0,1).toUpperCase()}${subTableFkClassName.substring(1)}(${pkColumn.javaField});
            }
            if (!${subclassName}List.isEmpty())
            {
                ${subclassName}Mapper.insertBatch(${subclassName}List);
            }
        }
    }
    
    /**
     * 保存${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Transactional
    public boolean save${ClassName}(${ClassName} ${className})
    {
        boolean result = save(${className});
        if (result) {
            insert${subClassName}(${className});
        }
        return result;
    }
    
    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Transactional
    public boolean update${ClassName}(${ClassName} ${className})
    {
        // 删除子表数据
        DbChain.table("${subTableName}")
            .where("${subTableFkName} = ?", ${className}.getId())
            .remove();
        
        // 新增子表数据
        insert${subClassName}(${className});
        
        // 更新主表数据
        return updateById(${className});
    }

    public boolean removeBatchByIds(${pkColumn.javaType}[] ids) {
        // 删除子表数据
        for (${pkColumn.javaType} id : ids) {
            DbChain.table("${subTableName}")
                .where("${subTableFkName} = ?", id)
                .remove();
        }
        // 删除主表数据
        return removeByIds(java.util.Arrays.asList(ids));
    }
    
#end
   
}
